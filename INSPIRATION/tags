APINFO	client.c	/^} APINFO;$/
AP_CLEANUP_FREQ	client.h	/^#define	AP_CLEANUP_FREQ			5000000		\/\/ cleanup AP/
ASSOCIATION	client.c	/^} ASSOCIATION;$/
ASSOC_CANCEL_PERIOD	client.h	/^#define	ASSOC_CANCEL_PERIOD		2000000		\/\/ cancel /
BASIC_TX_RADIUS	accesspoint.h	/^#define	BASIC_TX_RADIUS			60	\/\/ metres$/
BEACON_FREQ	accesspoint.h	/^#define	BEACON_FREQ			100000  \/\/send beacon fram/
BROADCAST	simulation.h	/^#define	BROADCAST		(-1)	\/\/ broadcasting $/
CLIENTINFO	accesspoint.c	/^} CLIENTINFO;$/
CLIENT_CLEANUP_FREQ	accesspoint.h	/^#define	CLIENT_CLEANUP_FREQ		10000000$/
COLOUR_OBJECTS	mapping.h	/^#define	COLOUR_OBJECTS	"#aaaaaa"$/
COLOUR_PATH	mapping.h	/^#define	COLOUR_PATH	"#80CC80"$/
COMMENT	mapping.h	/^#define	COMMENT		'#'$/
COUNT	accesspoint.c	/^#define COUNT	1000$/
DATA_FREQ	client.h	/^#define	DATA_FREQ			1000000		\/\/ transmit every 1/
DELETE_AP_range	accesspoint.c	/^static void DELETE_AP_range(void)$/
DRAW_AP_available	accesspoint.c	/^static void DRAW_AP_available(void)$/
DRAW_AP_full	accesspoint.c	/^static void DRAW_AP_full(void)$/
DRAW_AP_range	accesspoint.c	/^static void DRAW_AP_range(CnetPosition now)$/
DRAW_disassociation_ack	common.c	/^void DRAW_disassociation_ack(CnetAddr c, CnetAddr /
DRAW_disassociation_req	common.c	/^void DRAW_disassociation_req(CnetAddr c, CnetAddr /
DRAW_move_association	common.c	/^void DRAW_move_association(CnetAddr c, CnetAddr a,/
DRAW_new_association	common.c	/^void DRAW_new_association(CnetAddr c, CnetAddr a, /
DRAW_node_movement	client.c	/^void DRAW_node_movement(int nowx, int nowy)$/
EPS	mapping.c	/^#define	EPS	0.0001$/
EVENT_HANDLER	accesspoint.c	/^static EVENT_HANDLER(transmit_beacon)$/
EV_ASSOC_CANCEL	simulation.h	/^#define	EV_ASSOC_CANCEL		EV_TIMER3$/
EV_BEACON	simulation.h	/^#define EV_BEACON		EV_TIMER1$/
EV_CLEANUP	simulation.h	/^#define	EV_CLEANUP		EV_TIMER4$/
EV_DATA	simulation.h	/^#define EV_DATA			EV_TIMER2$/
EV_WALKING	walking.h	/^#define	EV_WALKING		EV_TIMER9$/
FOREACH_AP	client.c	/^#define	FOREACH_AP	for(a=0, ap=APs ; a<nAPs ; ++a,/
FOREACH_CLIENT	accesspoint.c	/^#define	FOREACH_CLIENT	for(c=0, cp=clients ; c<ncl/
FOREACH_OBJECT	mapping.c	/^#define	FOREACH_OBJECT	for(n=0, op=objects ; n<nob/
FOR_INDIVIDUAL	ga.c	/^#define FOR_INDIVIDUAL	for(i=0;i<MAX_POP;i++)$/
FOR_LOOP	optimize.h	/^#define FOR_LOOP	for(i=0;i<WIDTH;i++)for(j=0;j<HEI/
FOR_ME	simulation.h	/^#define	FOR_ME(frame)	(frame.header.dst == nodeinf/
FRAME	simulation.h	/^} FRAME;$/
HEADER	simulation.h	/^} HEADER;$/
HEIGHT	optimize.h	/^#define HEIGHT	(800)  \/\/ MAP HEIGHT$/
INDIVIDUAL	optimize.h	/^} INDIVIDUAL;$/
KIND	simulation.h	/^} KIND; $/
LOCATION	optimize.h	/^} LOCATION;     $/
LOG	common.c	/^void LOG(const char *fmt, ...)$/
LOSS	optimize.h	/^#define LOSS 12 \/\/signal loss per building$/
MAP	mapping.h	/^\/\/  ONLY ONE NODE NEEDS TO DRAW THE MAP (typical/
MAX_CLIENTS_PER_AP	accesspoint.h	/^#define	MAX_CLIENTS_PER_AP		3$/
MAX_ITERATION	ga.h	/^#define MAX_ITERATION 100	\/\/ the number of maxim/
MAX_PAUSE	walking.c	/^#define	MAX_PAUSE	30		\/\/ in seconds$/
MAX_PAYLOAD	simulation.h	/^#define	MAX_PAYLOAD		1024$/
MAX_POP	ga.h	/^#define MAX_POP 300			\/\/ the number of maximum p/
MAX_SPEED	walking.c	/^#define	MAX_SPEED	5		\/\/ metres per WALK_FREQUENC/
MAX_WALK_DIST	walking.c	/^#define	MAX_WALK_DIST	100		\/\/ maximum walk from /
MIN_PAUSE	walking.c	/^#define	MIN_PAUSE	5		\/\/ in seconds$/
Moptimize	optimize.c	/^int main(int argc, const char *argv[])$/
NUM_AP	ga.h	/^#define NUM_AP 50			\/\/ the number of maximum APs/
OBJECT	mapping.h	/^} OBJECT;$/
OBJTYPE	mapping.h	/^} OBJTYPE;$/
P_CROSSOVER	ga.h	/^#define	P_CROSSOVER 0.6		\/\/probability of crosso/
P_MUTATION	ga.h	/^#define P_MUTATION 0.1 		\/\/probability of mutati/
RADIUS	optimize.h	/^#define RADIUS (60)$/
RADIUS2	optimize.h	/^#define RADIUS2	(RADIUS*RADIUS)$/
SCALE	mapping.h	/^#define	SCALE(p)	((int)((p) \/ mapscale))$/
SIGNAL_LOSS_PER_OBJECT	simulation.c	/^#define SIGNAL_LOSS_PER_OBJECT		12.0      \/\/ dBm/
STATE	optimize.h	/^} STATE;$/
STATS	simulation.h	/^} STATS;$/
TX	common.c	/^void TX(KIND kind, CnetAddr dst)$/
UNKNOWN	mapping.c	/^#define	UNKNOWN			(-1)$/
USE_BASIC_WLAN_MODEL	simulation.c	/^#define	USE_BASIC_WLAN_MODEL		1$/
WALK_FREQUENCY	walking.c	/^#define	WALK_FREQUENCY	1000000		\/\/ take a step e/
WALK_ON_PATHS	walking.c	/^#define	WALK_ON_PATHS	1$/
WIDTH	optimize.h	/^#define WIDTH	(800)   \/\/ MAP WIDTH $/
WiFi	optimize.h	/^} WiFi;$/
_OPTIMIZE_H	optimize.h	/^#define _OPTIMIZE_H 1$/
_SIMULATION_H_	simulation.h	/^#define	_SIMULATION_H_$/
add_object	mapping.c	/^static void add_object(OBJTYPE type, const char *s/
associate_client	accesspoint.c	/^static bool associate_client(CnetAddr addr)$/
basic_WLAN_model	simulation.c	/^static WLANRESULT basic_WLAN_model(WLANSIGNAL *sig/
best_AP	client.c	/^static CnetAddr best_AP(void)$/
best_individual	ga.c	/^static INDIVIDUAL best_individual(INDIVIDUAL* popu/
brute_optimise	brute.c	/^void brute_optimise(int nap, int nclient, const ch/
brute_search	brute.c	/^static LOCATION brute_search()$/
centroid	accesspoint.c	/^static CnetPosition centroid(void)$/
choose_outside_position	mapping.c	/^void choose_outside_position(CnetPosition *new, in/
choose_path_position	mapping.c	/^void choose_path_position(CnetPosition *new, CnetP/
covered_path	optimize.c	/^int covered_path(void)$/
covered_ratio	optimize.c	/^double covered_ratio(void)$/
crossover	ga.c	/^static void crossover(INDIVIDUAL* population)$/
disassociate_client	accesspoint.c	/^static bool disassociate_client(CnetAddr addr)$/
distance	optimize.c	/^static double distance(int x0, int y0, int x1, int/
draw_map	mapping.c	/^void draw_map(void)$/
draw_walk	mapping.c	/^void draw_walk(CnetPosition *now, CnetPosition *ne/
elitist	ga.c	/^static void elitist(INDIVIDUAL* population)$/
evaluate_fitness	ga.c	/^static void evaluate_fitness(INDIVIDUAL* populatio/
find_point	mapping.c	/^static bool find_point(const char *str, double *x,/
fsl_WLAN_model	simulation.c	/^static WLANRESULT fsl_WLAN_model(WLANSIGNAL *sig)$/
ga_optimise	ga.c	/^void ga_optimise(int nclient, const char* mapfile)/
get_coverage	optimize.c	/^int get_coverage(LOCATION location)$/
get_relative_fitness	ga.c	/^static double get_relative_fitness(INDIVIDUAL indi/
init_accesspoint	accesspoint.c	/^void init_accesspoint(void)$/
init_client	client.c	/^void init_client(void)$/
init_map	optimize.c	/^void init_map (void)$/
init_population	ga.c	/^static void init_population(INDIVIDUAL* population/
intersect	mapping.c	/^static bool intersect(	double x0, double y0, doubl/
keep_the_best	ga.c	/^static void keep_the_best(INDIVIDUAL* population)$/
mutation	ga.c	/^static void mutation(INDIVIDUAL* population)$/
output	ga.c	/^static void output(INDIVIDUAL individual, int ncli/
prob	optimize.c	/^bool prob(void)$/
rand_location	ga.c	/^static LOCATION rand_location()$/
random_swap	ga.c	/^static void random_swap(INDIVIDUAL* father, INDIVI/
read_map	mapping.c	/^void read_map(const char *mapfile)$/
received_beacon	client.c	/^static void received_beacon(CnetAddr addr, double /
refresh_client	accesspoint.c	/^static void refresh_client(CnetAddr addr)$/
refresh_map	ga.c	/^static void refresh_map()$/
same_location	ga.c	/^static bool same_location(LOCATION src, LOCATION t/
selection	ga.c	/^static void selection(INDIVIDUAL* population, INDI/
set_obstacle	optimize.c	/^void set_obstacle(int x0, int y0, int x1, int y1)$/
set_path	optimize.c	/^void set_path(int x0, int y0, int x1, int y1)$/
set_path_covered	optimize.c	/^void set_path_covered(LOCATION location)$/
through_N_objects	mapping.c	/^int through_N_objects(CnetPosition S, CnetPosition/
through_an_object	mapping.c	/^bool through_an_object(CnetPosition S, CnetPositio/
total_path_area	optimize.c	/^int total_path_area(void)$/
trim	mapping.c	/^char *trim(char *line)$/
update_population	ga.c	/^static void update_population(INDIVIDUAL* old, IND/
usage	optimize.c	/^void usage(void)$/
wlan_model	optimize.c	/^static bool wlan_model(int x0, int y0, int x1, int/
